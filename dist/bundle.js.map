{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAO;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACJP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdA;AACA;AAC8C;AAC9C;AACO;AACP,yBAAyB,2DAAY;AACrC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;ACZA;AACA;AAC+C;AACT;AACtC;AACA;AACO;AACP;AACA,mCAAmC,WAAW,IAAI,UAAU,uBAAuB,iDAAS,CAAC;AAC7F;AACA;AACA,QAAQ,mDAAQ;AAChB;AACA,KAAK;AACL,yBAAyB,IAAI;AAC7B;AACA;;;;;;;;;;;;;;;;AChBA;AACA;AAC+C;AACT;AACtC;AACA;AACA;AACO;AACP;AACA,mCAAmC,WAAW,OAAO,iDAAS,CAAC,KAAK,UAAU;AAC9E;AACA;AACA,QAAQ,mDAAQ;AAChB;AACA,KAAK;AACL,yBAAyB,IAAI;AAC7B;AACA;AACA;;;;;;;;;;;;;;;AClBA;AACA;AACO;AACP;AACA;AACA,mBAAmB,mCAAmC;AACtD,8BAA8B,QAAQ;AACtC,KAAK;AACL;AACA;;;;;;UCTA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACA;AACoC;AACA;AACU;AACU;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;AACA;AACA,IAAI,iDAAM;AACV,IAAI,iDAAM;AACV,UAAU,2DAAY;AACtB,UAAU,qEAAiB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG","sources":["webpack://Client/./mockJSEnv.js","webpack://Client/./src/client/js/checkForDate.js","webpack://Client/./src/client/js/forecastOrCurrent.js","webpack://Client/./src/client/js/geoFetch.js","webpack://Client/./src/client/js/pixFetch.js","webpack://Client/./src/client/js/postData.js","webpack://Client/webpack/bootstrap","webpack://Client/webpack/runtime/define property getters","webpack://Client/webpack/runtime/hasOwnProperty shorthand","webpack://Client/webpack/runtime/make namespace object","webpack://Client/./src/client/js/index.js"],"sourcesContent":["export const weatherApiKey = 'ab60368d79a9411cac1a6afcce225d59';\r\nexport const geoApiKey = 'cole200406';\r\nexport const pixApiKey = '32251964-d3a8f6eb7f41a7da2ca59e329';\r\nexport const date = '2023-01-11T22:41:38.540Z'\r\nexport const formInput = \"raleigh\";","// Check for date will take the dateInput the user submitted and determine if the date entered is within a weeks time or not\r\n\r\nexport const checkForDate = async (dateInput) => {\r\n    let overWeek = Date.now() + (1000 * 60 * 60 * 24 * 7)\r\n    console.log(dateInput);\r\n    console.log(overWeek);\r\n    if (dateInput > overWeek) {\r\n        console.log('Greater than a week')\r\n        return true;\r\n    } else {\r\n        console.log('Less than a week')\r\n        return false;\r\n    }\r\n}\r\n\r\n","// forecast or current will take the reponse given from checkForDate and tell index.js to which weather api to run\r\n\r\nimport { checkForDate } from \"./checkForDate\";\r\n\r\nexport const forecastOrCurrent = async (dateInput) => {\r\n    let weekAway = await checkForDate(dateInput);\r\n    console.log(weekAway);\r\n    if (weekAway) {\r\n        console.log(`Running Forcast API`)\r\n    }else {\r\n        console.log(`Running current API`)\r\n    }\r\n}","// This is mainly used in both weather apis but this will take the any location entered by the user and determine it's coordinates\r\n\r\nimport { geoApiKey } from \"../../../mockJSEnv\";\r\nimport { postData } from \"./postData\";\r\nconst geoBaseUrl = \"https://secure.geonames.org/searchJSON?\"\r\n\r\nexport const geoAPI = async (formInput) => {\r\n    try{\r\n        const res = await fetch(`${geoBaseUrl}q=${formInput}&maxRows=10&username=${geoApiKey}`);\r\n        const apiData = await res.json();\r\n        console.log(`Returned geo Data`);\r\n        postData(apiData);\r\n        return (apiData);\r\n    }catch (err) {\r\n        return `Failed ${err}`\r\n    }\r\n}","// This api takes whatever location was entered by the user and fetches pictures of the location\r\n\r\nimport { pixApiKey } from \"../../../mockJSEnv\";\r\nimport { postData } from \"./postData\";\r\nconst pixBaseURL = \"https://pixabay.com/api/\"\r\n\r\n\r\nexport const pixAPI = async (formInput) => {\r\n    try{\r\n        const res = await fetch(`${pixBaseURL}?key=${pixApiKey}&q=${formInput}&image_type=photo`);\r\n        const apiData = await res.json();\r\n        console.log(apiData);\r\n        postData(apiData);\r\n        return (apiData);\r\n    }catch (err) {\r\n        return `Failed ${err}`\r\n    }\r\n}\r\n\r\n","//This sends any data fetched by the apis to the local server and placed in a object\r\n\r\nexport const postData = async (apiData) => {\r\n    fetch(\"http://localhost:8000/apiData\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\"},\r\n        body: JSON.stringify({apiData}),\r\n    })\r\n    .then((response) => response.json())\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//This is the brain of the entire website, every api that retruns data will be used is sent here and ran when the user presses the submit button\r\n\r\nimport { pixAPI } from \"./pixFetch\";\r\nimport { geoAPI } from \"./geoFetch\";\r\nimport { checkForDate } from \"./checkForDate\";\r\nimport { forecastOrCurrent } from \"./forecastOrCurrent\";\r\n\r\nlet form = document.getElementById(\"inputForm\");\r\nlet formInput = document.getElementById('placeInput');\r\n\r\nconst secondConverter = async () => {\r\n    try {\r\n        let formDate = document.getElementById('dateInput').value;\r\n        let date = new Date(formDate);\r\n        let dateInput = date.getTime()\r\n        return dateInput\r\n    } catch (err) {\r\n        `Failed: ${err}`\r\n    }\r\n}\r\n\r\nconst submitForm = async () => {\r\n    let dateInput = await secondConverter();\r\n    pixAPI(formInput);\r\n    geoAPI(formInput);\r\n    await checkForDate(dateInput);\r\n    await forecastOrCurrent(dateInput);\r\n    console.log(dateInput);\r\n};\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    form.addEventListener(\"submit\", (event) => {\r\n      event.preventDefault();\r\n      submitForm(dateInput);\r\n    });\r\n  });\r\n"],"names":[],"sourceRoot":""}